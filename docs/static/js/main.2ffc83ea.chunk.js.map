{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAkCeA,EA/BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAClB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCqBLO,EAjBK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE7B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IAEpB,4BAAIA,QCiDDO,EAnDC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAWd,ECfwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OAnBAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAM,SAAAC,GAECH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAI1B,CAACpB,IASGqB,EDViBK,CAAa1B,GAA9BO,EAAP,EAAOA,KAAMa,EAAb,EAAaA,QAEb,OACI,eAAC,WAAD,WACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAGlDoB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAEQT,EAAKE,KAAI,SAAAC,GAAG,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEMtBgB,EAlCM,WAGjB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAIA,OACI,eAAC,WAAD,WACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MChBjC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2ffc83ea.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    const [InputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(InputValue.trim().length > 0){\r\n            setCategories(cats => [InputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>            \r\n            <input \r\n                type=\"text\"\r\n                value={InputValue}\r\n                onChange={handleInputChange}\r\n            ></input>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n\r\n","export const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=5JgYQZ20dKjZeawjA41xL7gAGLEnYU4q&q=${encodeURI(category)}&limit=10`;\r\n\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title}></img>\r\n\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired\r\n}   \r\n\r\nexport default GifGridItem","//?lo comentado es sin usar un custom Hook\r\nimport React, { Fragment} from 'react'\r\n//import React, { Fragment, useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n//import { getGifs } from '../helpers/getGifs';\r\n\r\nconst GifGrid = ({category}) => {\r\n    /*\r\n    const [Images, setImages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(setImages);\r\n    }, [category]);\r\n*/\r\n    //getGifs();\r\n\r\n    const {data, loading} = useFetchGifs(category);\r\n    \r\n    return (\r\n        <Fragment>\r\n            <h3 className=\"animate__animated animate__bounce\">{category}</h3>\r\n            \r\n            {/*loading ? 'Cargando...' : 'Data Cargada'*/}\r\n            {loading && <p>Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    data.map(img =>\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n            \r\n            {/*\r\n            <div className=\"card-grid\">\r\n                {\r\n                    Images.map(img =>\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n            */}\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\n\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then( imgs => {\r\n                //setTimeout(() => {\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                //}, 3000)\r\n            });\r\n    }, [category]);\r\n/*\r\n    setTimeout(() => {\r\n        setstate({\r\n            data: [1,2,3,4,5],\r\n            loading: false\r\n        })\r\n    }, 3000);\r\n*/\r\n    return state;\r\n}","import React, { Fragment, useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n//solo si jamas cambia\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    //console.log(categories)\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>GifExpertApp</h2>\r\n\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => \r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    )\r\n            \r\n                /*\r\n                    categories.map(category => { <GifGrid />\r\n                        return <li key={category}>{category}</li>;\r\n                    })\r\n                */\r\n                }\r\n            </ol>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}